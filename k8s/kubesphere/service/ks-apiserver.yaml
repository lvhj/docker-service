# ks-apiserver.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    meta.helm.sh/release-name: ks-core
    meta.helm.sh/release-namespace: kubesphere-system
  creationTimestamp: "2024-07-13T03:32:10Z"
  generation: 1
  labels:
    app: ks-apiserver
    app.kubernetes.io/managed-by: Helm
    tier: backend
    version: v3.3.2
  name: ks-apiserver
  namespace: kubesphere-system
  resourceVersion: "5712"
  uid: 28b21959-2b9d-40be-8688-702f24445033
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: ks-apiserver
      tier: backend
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ks-apiserver
        tier: backend
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: In
                    values:
                      - ""
              weight: 100
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - ks-apiserver
              namespaces:
                - kubesphere-system
              topologyKey: kubernetes.io/hostname
      containers:
        - command:
            - ks-apiserver
            - --logtostderr=true
          image: registry.cn-hangzhou.aliyuncs.com/whatever233/ks-apiserver:v3.4.1
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 8
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          name: ks-apiserver
          ports:
            - containerPort: 9090
              protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 1Gi
            requests:
              cpu: 20m
              memory: 100Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/kubesphere/ingress-controller
              name: ks-router-config
            - mountPath: /etc/kubesphere/
              name: kubesphere-config
            - mountPath: /etc/localtime
              name: host-time
              readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: kubesphere
      serviceAccountName: kubesphere
      terminationGracePeriodSeconds: 30
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
          tolerationSeconds: 60
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
          tolerationSeconds: 60
      volumes:
        - configMap:
            defaultMode: 420
            name: ks-router-config
          name: ks-router-config
        - configMap:
            defaultMode: 420
            name: kubesphere-config
          name: kubesphere-config
        - hostPath:
            path: /etc/localtime
            type: ""
          name: host-time
